@using OpenWish.Web.Client.CustomEvents

@inject IProductService ProductService
@inject IJSRuntime JSRuntime

<div class="url-import-section mb-4">
    <div class="card bg-light">
        <div class="card-body">
            <h5 class="card-title">Import from URL</h5>
            <div class="input-group">
                <InputText class="form-control" placeholder="Paste a product URL" @bind-Value="@ImportUrl" @onopenwishpaste="HandleUrlPaste" />
                <button class="btn btn-primary" type="button" @onclick="ImportFromUrl" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Importing...</span>
                    }
                    else
                    {
                        <span>Import</span>
                    }
                </button>
            </div>
            <small class="text-muted">Paste a product URL to automatically fill in details from popular websites</small>
        </div>
    </div>
</div>

<EditForm Enhance Model="@Model" OnValidSubmit="@HandleSubmit" FormName="WishlistItemForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="@Model!.Name" />
        <ValidationMessage For="@(() => Model.Name)" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="@Model!.Description" />
        <ValidationMessage For="@(() => Model.Description)" />
    </div>

    <div class="mb-3">
        <label for="price" class="form-label">Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="@Model!.Price" />
        <ValidationMessage For="@(() => Model.Price)" />
    </div>

    <div class="mb-3">
        <label for="url" class="form-label">URL</label>
        <InputText id="url" class="form-control" @bind-Value="@Model!.Url" />
        <ValidationMessage For="@(() => Model.Url)" />
    </div>

    <div class="mb-3">
        <label for="whereToBuy" class="form-label">Where to Buy</label>
        <InputText id="whereToBuy" class="form-control" @bind-Value="@Model!.WhereToBuy" />
        <ValidationMessage For="@(() => Model.WhereToBuy)" />
    </div>

    <div class="mb-3">
        <label for="priority" class="form-label">Priority</label>
        <InputSelect id="priority" class="form-control" @bind-Value="@Model!.Priority">
            <option value="1">High</option>
            <option value="2">Medium</option>
            <option value="3">Low</option>
        </InputSelect>
    </div>

    <div class="mb-3 form-check">
        <InputCheckbox id="isPrivate" class="form-check-input" @bind-Value="@Model!.IsPrivate" />
        <label class="form-check-label" for="isPrivate">Private Item?</label>
        <ValidationMessage For="@(() => Model.IsPrivate)" />
    </div>

    <div class="d-flex justify-content-between">
        <button type="submit" class="btn btn-primary">@(Model.Id > 0 ? "Edit" : "Create") Item</button>
        @if (OnCancel.HasDelegate)
        {
            <button type="button" class="btn btn-outline-secondary" @onclick="HandleCancel">Cancel</button>
        }
    </div>
</EditForm>

@code {
    [Parameter] public WishlistItemModel Model { get; set; } = new();
    [Parameter] public EventCallback<WishlistItemModel> OnSubmit { get; set; }
    [Parameter] public EventCallback<WishlistItemModel> OnCancel { get; set; }

    private bool isLoading;
    private string ImportUrl { get; set; } = string.Empty;
    private string importMessage = string.Empty;
    private bool showImportMessage;

    private async Task ImportFromUrl()
    {
        if (string.IsNullOrWhiteSpace(ImportUrl))
            return;

        await ProcessUrlImport(ImportUrl);
    }

    private async Task HandleUrlPaste(OpenWishPasteEventArgs e)
    {
        ImportUrl = e.PastedData ?? string.Empty;
        if (!string.IsNullOrWhiteSpace(ImportUrl))
        {
            await ProcessUrlImport(ImportUrl);
        }
    }

    private async Task ProcessUrlImport(string url)
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            var product = await ProductService.TryScrapeProductFromUrl(url);
            if (product != null)
            {
                // Only update empty fields
                if (string.IsNullOrWhiteSpace(Model.Name) && !string.IsNullOrWhiteSpace(product.Name))
                    Model.Name = product.Name;
                    
                if (string.IsNullOrWhiteSpace(Model.Description) && !string.IsNullOrWhiteSpace(product.Description))
                    Model.Description = product.Description;
                    
                if (!Model.Price.HasValue && product.Price.HasValue)
                    Model.Price = product.Price;
                    
                if (string.IsNullOrWhiteSpace(Model.Url))
                    Model.Url = url;
                    
                if (string.IsNullOrWhiteSpace(Model.WhereToBuy))
                    Model.WhereToBuy = new Uri(url).Host.Replace("www.", "");
                    
                // Set default priority if not set
                if (!Model.Priority.HasValue)
                    Model.Priority = 2; // Medium priority by default
                
                await JSRuntime.InvokeVoidAsync("alert", "Product details imported successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Could not extract product details. Please fill in the form manually.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error scraping URL: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error processing URL. Please fill in the form manually.");
        }
        finally
        {
            // Clear the import URL field after processing
            ImportUrl = string.Empty;
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(Model);
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
}