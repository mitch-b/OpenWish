@attribute [Authorize]
@page "/wishlists/{WishlistId:int}"

@using OpenWish.Shared.Services
@using OpenWish.Web.Client.Components.Wishlist

@inject IUserContextService UserContextService
@inject IWishlistService WishlistService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveAuto

<PageTitle>@(_wishlist?.Name ?? "Wishlist")</PageTitle>

@if (_wishlist == null)
{
    <p>Loading...</p>
}
else
{
    <div class="wishlist-header mb-4">
        <div class="d-flex justify-content-between align-items-start">
            <div>
                <h2>@_wishlist.Name</h2>
                @if (_wishlist.IsCollaborative)
                {
                    <span class="badge bg-info">Collaborative Wishlist</span>
                }
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-primary d-inline-flex align-items-center" @onclick="ShareWishlist">
                    <i class="bi bi-share me-2"></i> Share
                </button>
                @if (_isOwner)
                {
                    <a href="/wishlists/@WishlistId/manage" class="btn btn-light d-inline-flex align-items-center">
                        <i class="bi bi-gear me-2"></i> Manage Wishlist
                    </a>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="mb-3 d-flex justify-content-between align-items-center">
                <div class="btn-group">
                    <button class="btn @(SortBy == "name" ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => SortItems("name"))">
                        Name <i class="bi @(SortBy == "name" ? (SortAscending ? "bi-sort-alpha-down" : "bi-sort-alpha-up") : "")"></i>
                    </button>
                    <button class="btn @(SortBy == "priority" ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => SortItems("priority"))">
                        Priority <i class="bi @(SortBy == "priority" ? (SortAscending ? "bi-sort-numeric-down" : "bi-sort-numeric-up") : "")"></i>
                    </button>
                    <button class="btn @(SortBy == "price" ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => SortItems("price"))">
                        Price <i class="bi @(SortBy == "price" ? (SortAscending ? "bi-sort-numeric-down" : "bi-sort-numeric-up") : "")"></i>
                    </button>
                </div>

                <div class="d-flex gap-2 align-items-center">
                    <select class="form-select" style="width: auto" @bind="PriorityFilter">
                        <option value="all">All Priorities</option>
                        <option value="1">High Priority</option>
                        <option value="2">Medium Priority</option>
                        <option value="3">Low Priority</option>
                    </select>
                    
                    <div class="btn-group" role="group" aria-label="View toggle">
                        <button type="button" class="btn @(ViewMode == "list" ? "btn-primary" : "btn-outline-primary")" @onclick="() => ViewMode = "list"">
                            <i class="bi bi-list-ul"></i>
                        </button>
                        <button type="button" class="btn @(ViewMode == "card" ? "btn-primary" : "btn-outline-primary")" @onclick="() => ViewMode = "card"">
                            <i class="bi bi-grid-3x3-gap"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="wishlist-content view-transition">
                @if (_items != null)
                {
                    @if (_filteredItems.Count == 0)
                    {
                        <div class="alert alert-info">
                            No items match the current filters. Try changing your filter settings or add new items.
                        </div>
                    }
                    else if (_canEdit)
                    {
                        @if (ViewMode == "list")
                        {
                            <WishlistItemList Items="@_filteredItems" OnEdit="@HandleItemEdit" OnDelete="@HandleItemDelete" />
                        }
                        else
                        {
                            <WishlistCardView Items="@_filteredItems" OnEdit="@HandleItemEdit" OnDelete="@HandleItemDelete" />
                        }
                    }
                    else
                    {
                        @if (ViewMode == "list")
                        {
                            <WishlistItemList Items="@_filteredItems" />
                        }
                        else
                        {
                            <WishlistCardView Items="@_filteredItems" />
                        }
                    }
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
        <div class="col-md-4">
            @if (_canEdit)
            {
                <div class="add-item-section">
                    <h4>Add New Item</h4>
                    <WishlistItemForm Model="@_newItem" OnSubmit="@HandleAddItem" />
                </div>
            }
        </div>
    </div>
}

<OpenWish.Web.Client.Components.Diagnostics.SessionInformation />

@code {

    [Parameter]
    public int WishlistId { get; set; }

    private WishlistModel? _wishlist;
    private List<WishlistItemModel> _items = new();
    private List<WishlistItemModel> _filteredItems = new();
    private WishlistItemModel _newItem = new();
    private string? _currentUserId;
    private bool _canEdit;
    private bool _isOwner;
    private string SortBy { get; set; } = "priority";
    private bool SortAscending { get; set; } = true;
    private string PriorityFilter { get; set; } = "all";
    private string ViewMode { get; set; } = "list"; // "list" or "card"

    protected override async Task OnInitializedAsync()
    {
        _wishlist = await WishlistService.GetWishlistAsync(WishlistId);
        await SetupSecurity();
        await LoadItems();
    }

    private async Task LoadItems()
    {
        _items = (await WishlistService.GetWishlistItemsAsync(WishlistId)).ToList();
        ApplyFiltersAndSort();
    }

    private void ApplyFiltersAndSort()
    {
        var filtered = _items.AsEnumerable();

        // Apply priority filter
        if (PriorityFilter != "all")
        {
            if (int.TryParse(PriorityFilter, out int priority))
            {
                filtered = filtered.Where(i => i.Priority == priority);
            }
        }

        // Apply sorting
        filtered = SortBy switch
        {
            "name" => SortAscending 
                ? filtered.OrderBy(i => i.Name) 
                : filtered.OrderByDescending(i => i.Name),
                
            "priority" => SortAscending 
                ? filtered.OrderBy(i => i.Priority) 
                : filtered.OrderByDescending(i => i.Priority),
                
            "price" => SortAscending 
                ? filtered.OrderBy(i => i.Price) 
                : filtered.OrderByDescending(i => i.Price),
                
            _ => filtered
        };

        _filteredItems = filtered.ToList();
    }

    private void SortItems(string sortBy)
    {
        if (SortBy == sortBy)
        {
            // Toggle sort direction
            SortAscending = !SortAscending;
        }
        else
        {
            // New sort field, default to ascending
            SortBy = sortBy;
            SortAscending = true;
        }

        ApplyFiltersAndSort();
    }

    private async Task HandleAddItem(WishlistItemModel item)
    {
        await WishlistService.AddItemToWishlistAsync(WishlistId, item);
        _newItem = new WishlistItemModel();
        await LoadItems();
    }

    private async Task HandleItemEdit(WishlistItemModel item)
    {
        await WishlistService.UpdateWishlistItemAsync(WishlistId, item.Id, item);
        await LoadItems();
    }

    private async Task HandleItemDelete(WishlistItemModel item)
    {
        await WishlistService.RemoveItemFromWishlistAsync(WishlistId, item.Id);
        await LoadItems();
    }

    private async Task SetupSecurity()
    {
        if (_wishlist == null) return;
        _currentUserId ??= await UserContextService.GetUserIdAsync();

        _isOwner = _wishlist.OwnerId == _currentUserId;
        _canEdit = _isOwner || _wishlist.IsCollaborative;
    }

    private async Task ShareWishlist()
    {
        string wishlistUrl = NavigationManager.Uri;
        
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", wishlistUrl);
            await JSRuntime.InvokeVoidAsync("alert", "Wishlist URL copied to clipboard!");
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("alert", "Unable to copy. Please copy the URL manually.");
        }
    }
}
