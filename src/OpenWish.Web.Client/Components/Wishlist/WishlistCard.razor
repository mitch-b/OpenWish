@inject IWishlistService WishlistService
@inject ILogger<WishlistCard> Logger
@inject NavigationManager NavigationManager

@if (Wishlist == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card h-100 shadow-sm wishlist-card" @onclick="NavigateToWishlist">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-start">
                <h5 class="card-title mb-1">@Wishlist.Name</h5>
                <span style="font-size: 1.5rem;">ðŸ“‹</span>
            </div>
            <p class="card-text">
                <span class="badge bg-primary">@Wishlist.Items?.Count items</span>
                @if (Wishlist.IsCollaborative)
                {
                    <span class="badge bg-info">Collaborative</span>
                }
            </p>
            <div class="d-flex justify-content-between align-items-center">
                <small class="text-muted">Created by @Wishlist.Owner?.UserName</small>
                <div class="dropdown d-inline-block">
                    <button class="btn btn-outline-secondary btn-sm kebab-menu"
                            type="button"
                            id="dropdownMenu@(Wishlist.Id)"
                            data-bs-toggle="dropdown"
                            aria-expanded="false"
                            @onclick:stopPropagation="true">
                        â‹®
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenu@(Wishlist.Id)">
                        <li>
                            <button class="dropdown-item text-danger"
                                    @onclick:stopPropagation="true"
                                    @onclick="ShowDeleteDialog">
                                Delete
                            </button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <WishlistDeleteDialog @ref="deleteDialog" OnConfirm="HandleDelete" />
}

@code {
    [Parameter]
    public WishlistModel? Wishlist { get; set; }
    [Parameter]
    public EventCallback<WishlistModel> OnDelete { get; set; }

    private WishlistDeleteDialog deleteDialog;

    private void ShowDeleteDialog()
    {
        deleteDialog.Show(
            "Delete Wishlist",
            $"Are you sure you want to delete the wishlist '{Wishlist?.Name}'? This action cannot be undone."
        );
    }

    private async Task HandleDelete()
    {
        if (Wishlist != null)
        {
            Logger.LogInformation("Deleting wishlist {WishlistId}", Wishlist.Id);
            await WishlistService.DeleteWishlistAsync(Wishlist.Id);
            if (OnDelete.HasDelegate)
            {
                await OnDelete.InvokeAsync(Wishlist);
            }
        }
    }

    private void NavigateToWishlist() => NavigationManager.NavigateTo($"/wishlists/{Wishlist?.Id}");
}
