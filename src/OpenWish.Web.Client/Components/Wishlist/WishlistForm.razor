
@if (Model is not null)
{
    <EditForm Model="@Model" OnValidSubmit="@HandleSubmit" FormName="WishlistForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" 
            @bind-Value="@Model!.Name" />
            <ValidationMessage For="@(() => Model.Name)" />
        </div>

        <div class="mb-3 form-check">
            <InputCheckbox id="isCollaborative" class="form-check-input" @bind-Value="@Model!.IsCollaborative" />
            <label class="form-check-label" for="isCollaborative">
                Is Collaborative? (allows other invited members to add items to your list)
            </label>
            <ValidationMessage For="@(() => Model.IsCollaborative)" />
        </div>

        <div class="mb-3 form-check">
            <InputCheckbox id="isPrivate" class="form-check-input" @bind-Value="@Model!.IsPrivate" />
            <label class="form-check-label" for="isPrivate">
                Private Wishlist (only you can see it - uncheck to make it visible to friends)
            </label>
            <ValidationMessage For="@(() => Model.IsPrivate)" />
        </div>

        <div class="mt-4 d-flex gap-2">
            <button type="submit" class="btn btn-primary">@(Model.Id == 0 ? "Create" : "Update") Wishlist</button>
            @if (OnCancel.HasDelegate)
            {
                <button type="button" class="btn btn-outline-secondary" @onclick="HandleCancel">Cancel</button>
            }
        </div>
    </EditForm>
}
else
{
    <p>Loading form...</p>
}


@code {
    [Parameter] public WishlistModel? Model { get; set; }
    [Parameter] public EventCallback<WishlistModel> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private async Task HandleSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(Model);
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
}