@using OpenWish.Web.Client.CustomEvents

@inject IProductService ProductService

<EditForm Enhance Model="@Model" OnValidSubmit="@HandleSubmit" FormName="WishlistItemForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="@Model!.Name" />
        <ValidationMessage For="@(() => Model.Name)" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="@Model!.Description" />
        <ValidationMessage For="@(() => Model.Description)" />
    </div>

    <div class="mb-3">
        <label for="price" class="form-label">Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="@Model!.Price" />
        <ValidationMessage For="@(() => Model.Price)" />
    </div>

    <div class="mb-3">
        <label for="url" class="form-label">URL</label>
        <InputText id="url" class="form-control" @bind-Value="@Model!.Url" @onopenwishpaste="HandleUrlPaste" />
        <small class="text-muted">Paste a product URL to automatically fill in details</small>
        <ValidationMessage For="@(() => Model.Url)" />
    </div>

    <div class="mb-3">
        <label for="whereToBuy" class="form-label">Where to Buy</label>
        <InputText id="whereToBuy" class="form-control" @bind-Value="@Model!.WhereToBuy" />
        <ValidationMessage For="@(() => Model.WhereToBuy)" />
    </div>

    <div class="mb-3">
        <label for="priority" class="form-label">Priority</label>
        <InputSelect id="priority" class="form-control" @bind-Value="@Model!.Priority">
            <option value="1">High</option>
            <option value="2">Medium</option>
            <option value="3">Low</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        <InputCheckbox id="isPrivate" @bind-Value="@Model!.IsPrivate" /> Private Item?
        <ValidationMessage For="@(() => Model.IsPrivate)" />
    </div>

    <button type="submit" class="btn btn-primary">@(Model.Id > 0 ? "Edit" : "Create") Item</button>
    @if (OnCancel.HasDelegate)
    {
        <button type="button" class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
    }
</EditForm>

@code {
    [Parameter] public WishlistItemModel Model { get; set; } = new();
    [Parameter] public EventCallback<WishlistItemModel> OnSubmit { get; set; }
    [Parameter] public EventCallback<WishlistItemModel> OnCancel { get; set; }

    private bool isLoading;

    private async Task HandleUrlPaste(OpenWishPasteEventArgs e)
    {
        try
        {
            isLoading = true;

            var url = e.PastedData;
            
            if (!string.IsNullOrEmpty(url))
            {
                var product = await ProductService.TryScrapeProductFromUrl(url);
                if (product != null)
                {
                    // TODO: only replace properties that are null/empty
                    Model.Name = product.Name ?? Model.Name;
                    Model.Description = product.Description ?? Model.Description;
                    Model.Price = product.Price ?? Model.Price;
                    Model.Url = url;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            // You might want to add error handling/display here
            Console.Error.WriteLine($"Error scraping URL: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(Model);
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
}