@attribute [Authorize]
@page "/wishlists/{WishlistId:int}"

@using OpenWish.Application.Services
@using OpenWish.Data.Entities
@using OpenWish.Web.Components.Wishlist
@using OpenWish.Web.Services

@inject IUserContextService UserContextService
@inject IWishlistService WishlistService

@rendermode InteractiveServer

<PageTitle>@(_wishlist is not null ? _wishlist?.Name : "") Wishlist</PageTitle>

@if (_wishlist is null)
{
    <p>Loading...</p>
}
else
{
    <div class="row mb-4">
        <div class="col">
            <h2>@_wishlist?.Name</h2>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            @if (_items is not null)
            {
                @if (_canEdit)
                {
                    <WishlistItemList Items="@_items" OnEdit="@HandleItemEdit" />
                }
                else 
                {
                    <WishlistItemList Items="@_items" />
                }
            }
            else
            {
                <p>Loading...</p>
            }
        </div>
        <div class="col-md-4">
            @if (_canEdit)
            {
                <h4>Add New Item</h4>
                <WishlistItemForm Model="@_newItem" OnSubmit="@HandleAddItem" />
            }
            else
            {
                // use this space for something?
            }
        </div>
    </div>
}

@code {
    [Parameter] public int WishlistId { get; set; }
    private Wishlist? _wishlist;
    private List<WishlistItem> _items = new();
    private WishlistItem _newItem = new();
    private string? _currentUserId;
    private bool _canEdit;

    protected override async Task OnInitializedAsync()
    {
        _wishlist = await WishlistService.GetWishlistAsync(WishlistId);
        await SetupSecurity();
        await LoadItems();
    }

    private async Task LoadItems()
    {
        _items = (await WishlistService.GetWishlistItemsAsync(WishlistId)).ToList();
    }

    private async Task HandleAddItem(WishlistItem item)
    {
        await WishlistService.AddItemToWishlistAsync(WishlistId, item);
        _newItem = new WishlistItem();
        await LoadItems();
    }

    private async Task HandleItemEdit(WishlistItem item)
    {
        await WishlistService.UpdateWishlistItemAsync(WishlistId, item.Id, item);
        await LoadItems();
    }

    private async Task SetupSecurity()
    {
        if (_wishlist == null) return;
        _currentUserId ??= await UserContextService.GetUserIdAsync();
        _canEdit = _wishlist.OwnerId == _currentUserId || _wishlist.IsCollaborative;
    }
}