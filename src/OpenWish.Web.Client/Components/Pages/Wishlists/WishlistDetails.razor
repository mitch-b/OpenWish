@attribute [Authorize]
@page "/wishlists/{WishlistId:int}"

@using OpenWish.Shared.Services
@using OpenWish.Web.Client.Components.Wishlist

@inject IUserContextService UserContextService
@inject IWishlistService WishlistService

@rendermode InteractiveAuto

<PageTitle>@(_wishlist is not null ? _wishlist?.Name : "") Wishlist</PageTitle>

@if (_wishlist is null)
{
    <p>Loading...</p>}
else
{
    <div class="wishlist-header">
        <h2>@_wishlist?.Name</h2>
        @if (_wishlist.IsCollaborative)
        {
            <span class="badge bg-info">Collaborative Wishlist</span>
        }
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="wishlist-content view-transition">
                @if (_items is not null)
                {
                    @if (_canEdit)
                    {
                        <WishlistItemList Items="@_items" OnEdit="@HandleItemEdit" />
                    }
                    else 
                    {
                        <WishlistItemList Items="@_items" />
                    }
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
        <div class="col-md-4">
            @if (_canEdit)
            {
                <div class="add-item-section">
                    <h4>Add New Item</h4>
                    <WishlistItemForm Model="@_newItem" OnSubmit="@HandleAddItem" />
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int WishlistId { get; set; }
    private WishlistModel? _wishlist;
    private List<WishlistItemModel> _items = new();
    private WishlistItemModel _newItem = new();
    private string? _currentUserId;
    private bool _canEdit;

    protected override async Task OnInitializedAsync()
    {
        _wishlist = await WishlistService.GetWishlistAsync(WishlistId);
        await SetupSecurity();
        await LoadItems();
    }

    private async Task LoadItems()
    {
        _items = (await WishlistService.GetWishlistItemsAsync(WishlistId)).ToList();
    }

    private async Task HandleAddItem(WishlistItemModel item)
    {
        await WishlistService.AddItemToWishlistAsync(WishlistId, item);
        _newItem = new WishlistItemModel();
        await LoadItems();
    }

    private async Task HandleItemEdit(WishlistItemModel item)
    {
        await WishlistService.UpdateWishlistItemAsync(WishlistId, item.Id, item);
        await LoadItems();
    }

    private async Task SetupSecurity()
    {
        if (_wishlist == null) return;
        _currentUserId ??= await UserContextService.GetUserIdAsync();
        _canEdit = _wishlist.OwnerId == _currentUserId || _wishlist.IsCollaborative;
    }
}