@using OpenWish.Shared.Extensions;

<div class="table-responsive">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Priority</th>
                <th>Added</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                @if (EditingItemId == item.Id)
                {
                    <tr>
                        <td colspan="6">
                            <WishlistItemForm
                                Model="@item"
                                OnSubmit="@HandleEditSubmit"
                                OnCancel="@HandleOnCancel" />
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>
                            <span class="item-name">@item.Name</span>
                            @if (!string.IsNullOrEmpty(item.Url))
                            {
                                <a href="@item.Url" target="_blank" class="ms-2 text-decoration-none">
                                    üîó
                                </a>
                            }
                        </td>
                        <td>@(string.IsNullOrWhiteSpace(item.Description) ? "-" : item.Description)</td>
                        <td>@(item.Price?.ToString("C") ?? "-")</td>
                        <td>
                            <span class="priority-badge @GetPriorityClass(item.Priority)">
                                @GetPriorityText(item.Priority)
                            </span>
                        </td>
                        <td>
                            <span class="tooltip-container">
                                @item.CreatedOn.ToLocalHumanizedString()
                                <span class="tooltip-text">@item.CreatedOn.ToLocalTime()</span>
                            </span>
                        </td>
                        <td>
                            <div class="btn-group">
                                @if (OnEdit.HasDelegate)
                                {
                                    <button
                                        class="btn btn-sm btn-primary"
                                        @onclick="() => StartEdit(item.Id)"
                                        title="Edit item">
                                        ‚úèÔ∏è
                                    </button>
                                }
                                @if (OnDelete.HasDelegate)
                                {
                                    <button
                                        class="btn btn-sm btn-danger"
                                        @onclick="() => ShowDeleteConfirm(item)"
                                        title="Delete item">
                                        üóëÔ∏è
                                    </button>
                                }
                                @if (ShowInteractions)
                                {
                                    <button
                                        class="btn btn-sm btn-outline-secondary"
                                        @onclick="() => ToggleInteractions(item.Id)"
                                        title="Show interactions">
                                        @(ExpandedInteractions.Contains(item.Id) ? "‚¨ÜÔ∏è" : "‚¨áÔ∏è")
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                    @if (ShowInteractions && ExpandedInteractions.Contains(item.Id))
                    {
                        <tr>
                            <td colspan="6" class="interaction-row">
                                <div class="d-flex gap-3">
                                    @if (!IsOwner)
                                    {
                                        <div class="flex-shrink-0" style="min-width: 300px;">
                                            <h6>Reserve Item</h6>
                                            <ItemReservation WishlistId="@WishlistId" ItemId="@item.Id" OwnerId="@OwnerId" />
                                        </div>
                                    }
                                    <div class="flex-grow-1">
                                        <h6>Comments</h6>
                                        <ItemComments WishlistId="@WishlistId" ItemId="@item.Id" IsWishlistOwner="@IsOwner" />
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>

<WishlistDeleteDialog @ref="deleteDialog" OnConfirm="HandleDelete" />

@code {
    [Parameter] public IEnumerable<WishlistItemModel> Items { get; set; } = Array.Empty<WishlistItemModel>();
    [Parameter] public EventCallback<WishlistItemModel> OnEdit { get; set; }
    [Parameter] public EventCallback<WishlistItemModel> OnDelete { get; set; }
    [Parameter] public bool ShowInteractions { get; set; } = false;
    [Parameter] public int WishlistId { get; set; }
    [Parameter] public string OwnerId { get; set; } = "";
    [Parameter] public bool IsOwner { get; set; } = false;

    private int? EditingItemId;
    private WishlistDeleteDialog deleteDialog;
    private WishlistItemModel? itemToDelete;
    private HashSet<int> ExpandedInteractions = new();

    private void StartEdit(int itemId)
    {
        EditingItemId = itemId;
    }

    private void ToggleInteractions(int itemId)
    {
        if (ExpandedInteractions.Contains(itemId))
        {
            ExpandedInteractions.Remove(itemId);
        }
        else
        {
            ExpandedInteractions.Add(itemId);
        }
    }

    private async Task HandleEditSubmit(WishlistItemModel item)
    {
        if (OnEdit.HasDelegate)
        {
            await OnEdit.InvokeAsync(item);
        }
        EditingItemId = null;
    }

    private async Task HandleOnCancel(WishlistItemModel item)
    {
        EditingItemId = null;
    }

    private void ShowDeleteConfirm(WishlistItemModel item)
    {
        itemToDelete = item;
        deleteDialog.Show(
            "Delete Item",
            $"Are you sure you want to delete \"{item.Name}\"? This action cannot be undone."
        );
    }

    private async Task HandleDelete()
    {
        if (itemToDelete != null && OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync(itemToDelete);
            itemToDelete = null;
        }
    }

    private string GetPriorityClass(int? priority) => priority switch
    {
        1 => "priority-high",
        2 => "priority-medium",
        3 => "priority-low",
        _ => "priority-none"
    };

    private string GetPriorityText(int? priority) => priority switch
    {
        1 => "High",
        2 => "Medium",
        3 => "Low",
        _ => "None"
    };
}