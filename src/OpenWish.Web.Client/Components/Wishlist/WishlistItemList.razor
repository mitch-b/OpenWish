@using OpenWish.Shared.Extensions;

<div class="table-responsive">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Priority</th>
                <th>Added</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                @if (EditingItemId == item.Id)
                {
                    <tr>
                        <td colspan="6">
                            <WishlistItemForm
                                Model="@item"
                                OnSubmit="@HandleEditSubmit"
                                OnCancel="@HandleOnCancel" />
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>
                            <span class="item-name">@item.Name</span>
                            @if (!string.IsNullOrEmpty(item.Url))
                            {
                                <a href="@item.Url" target="_blank" class="ms-2 text-decoration-none">
                                    <i class="bi bi-box-arrow-up-right"></i>
                                </a>
                            }
                        </td>
                        <td>@(string.IsNullOrWhiteSpace(item.Description) ? "-" : item.Description)</td>
                        <td>@(item.Price?.ToString("C") ?? "-")</td>
                        <td>
                            <span class="priority-badge @GetPriorityClass(item.Priority)">
                                @GetPriorityText(item.Priority)
                            </span>
                        </td>
                        <td>
                            <span class="tooltip-container">
                                @item.CreatedOn.ToLocalHumanizedString()
                                <span class="tooltip-text">@item.CreatedOn.ToLocalTime()</span>
                            </span>
                        </td>
                        <td>
                            <div class="btn-group">
                                <button
                                    class="btn btn-sm btn-primary"
                                    @onclick="() => StartEdit(item.Id)"
                                    title="Edit item">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button
                                    class="btn btn-sm btn-danger"
                                    @onclick="() => ShowDeleteConfirm(item)"
                                    title="Delete item">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<WishlistDeleteDialog @ref="deleteDialog" OnConfirm="HandleDelete" />

@code {
    [Parameter] public IEnumerable<WishlistItemModel> Items { get; set; } = Array.Empty<WishlistItemModel>();
    [Parameter] public EventCallback<WishlistItemModel> OnEdit { get; set; }
    [Parameter] public EventCallback<WishlistItemModel> OnDelete { get; set; }

    private int? EditingItemId;
    private WishlistDeleteDialog deleteDialog;
    private WishlistItemModel? itemToDelete;

    private void StartEdit(int itemId)
    {
        EditingItemId = itemId;
    }

    private async Task HandleEditSubmit(WishlistItemModel item)
    {
        if (OnEdit.HasDelegate)
        {
            await OnEdit.InvokeAsync(item);
        }
        EditingItemId = null;
    }

    private async Task HandleOnCancel(WishlistItemModel item)
    {
        EditingItemId = null;
    }

    private void ShowDeleteConfirm(WishlistItemModel item)
    {
        itemToDelete = item;
        deleteDialog.Show(
            "Delete Item",
            $"Are you sure you want to delete \"{item.Name}\"? This action cannot be undone."
        );
    }

    private async Task HandleDelete()
    {
        if (itemToDelete != null && OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync(itemToDelete);
            itemToDelete = null;
        }
    }

    private string GetPriorityClass(int? priority) => priority switch
    {
        1 => "priority-high",
        2 => "priority-medium",
        3 => "priority-low",
        _ => "priority-none"
    };

    private string GetPriorityText(int? priority) => priority switch
    {
        1 => "High",
        2 => "Medium",
        3 => "Low",
        _ => "None"
    };
}