@using OpenWish.Shared.Models
@using OpenWish.Shared.Services

@inject IWishlistService WishlistService
@inject IUserContextService UserContextService

<div class="item-reservation">
    @if (_loading)
    {
        <div class="spinner-border spinner-border-sm" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        @if (_isReserved)
        {
            <div class="alert alert-success mb-2">
                @if (_myReservation)
                {
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>You have reserved this item.</strong>
                            <div class="small mt-1">Reserved on @_reservation.ReservationDate.ToLocalTime().ToString("MM/dd/yyyy")</div>
                        </div>
                        <button class="btn btn-sm btn-outline-danger" @onclick="CancelReservation">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                }
                else
                {
                    <div>
                        @if (_reservation.IsAnonymous)
                        {
                            <strong>This item has been reserved</strong>
                        }
                        else
                        {
                            <strong>Reserved by @(_reservation.User?.UserName ?? "Unknown User")</strong>
                        }
                        <div class="small mt-1">Reserved on @_reservation.ReservationDate.ToLocalTime().ToString("MM/dd/yyyy")</div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="form-check mb-2">
                <input class="form-check-input" type="checkbox" id="anonymousCheckbox" @bind="_anonymous" />
                <label class="form-check-label" for="anonymousCheckbox">
                    Reserve anonymously
                </label>
            </div>
            
            <button class="btn btn-success w-100" @onclick="ReserveItem">
                <i class="bi bi-gift"></i> I'll Get This
            </button>
        }
    }
    
    @if (_error)
    {
        <div class="alert alert-danger mt-2">
            @_errorMessage
        </div>
    }
</div>

@code {
    [Parameter]
    public int WishlistId { get; set; }

    [Parameter]
    public int ItemId { get; set; }
    
    [Parameter]
    public string OwnerId { get; set; }

    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = "An error occurred. Please try again.";
    private bool _isReserved = false;
    private bool _myReservation = false;
    private bool _anonymous = false;
    private ItemReservationModel _reservation = new ItemReservationModel();
    private string? _currentUserId;

    protected override async Task OnInitializedAsync()
    {
        await CheckReservation();
    }

    protected override async Task OnParametersSetAsync()
    {
        await CheckReservation();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _error && _currentUserId == null)
        {
            // If we had an error during SSR and no user ID, try again after first render
            await CheckReservation();
        }
    }

    private async Task CheckReservation()
    {
        try
        {
            _loading = true;
            _error = false;
            _currentUserId ??= await UserContextService.GetUserIdAsync();

            // If no user ID available (e.g., during SSR), don't show reservation options
            if (_currentUserId == null)
            {
                _loading = false;
                _isReserved = false;
                return;
            }

            // Check if the current user is the wishlist owner
            if (_currentUserId == OwnerId)
            {
                _loading = false;
                _isReserved = false;
                return; // Wishlist owners can't reserve their own items
            }

            var reservation = await WishlistService.GetItemReservationAsync(WishlistId, ItemId);
            
            if (reservation != null)
            {
                _isReserved = true;
                _reservation = reservation;
                _myReservation = reservation.UserId == _currentUserId;
            }
            else
            {
                _isReserved = false;
            }
        }
        catch (Exception ex)
        {
            // Handle errors gracefully - could be SSR issues or actual service errors
            _error = true;
            _errorMessage = "Failed to check reservation status. This may be resolved when the page becomes interactive.";
            // Log the actual error for debugging
            System.Diagnostics.Debug.WriteLine($"CheckReservation error: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task ReserveItem()
    {
        try
        {
            _loading = true;
            _error = false;
            _currentUserId ??= await UserContextService.GetUserIdAsync();

            if (_currentUserId != null)
            {
                var result = await WishlistService.ReserveItemAsync(WishlistId, ItemId, _currentUserId, _anonymous);
                
                if (result)
                {
                    await CheckReservation();
                }
                else
                {
                    _error = true;
                    _errorMessage = "This item has already been reserved by someone else.";
                }
            }
            else
            {
                _error = true;
                _errorMessage = "Please log in to reserve items.";
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = "Failed to reserve this item. Please try again.";
            System.Diagnostics.Debug.WriteLine($"ReserveItem error: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task CancelReservation()
    {
        try
        {
            _loading = true;
            _error = false;
            _currentUserId ??= await UserContextService.GetUserIdAsync();

            if (_currentUserId != null)
            {
                await WishlistService.CancelReservationAsync(WishlistId, ItemId, _currentUserId);
                await CheckReservation();
            }
        }
        catch
        {
            _error = true;
            _errorMessage = "Failed to cancel the reservation. Please try again.";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
}