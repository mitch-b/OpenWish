@page "/events/{EventId:int}"
@attribute [Authorize]

@using OpenWish.Web.Client.Components.Event
@using OpenWish.Shared.Services

@inject IEventService EventService
@inject IUserContextService UserContextService
@inject NavigationManager NavigationManager

@rendermode InteractiveAuto

<PageTitle>Event Details - @(_event?.Name ?? "")</PageTitle>

@if (_event == null)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container py-5">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>@_event.Name</h1>
            @if (_isOwner)
            {
                <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo($"/events/{EventId}/manage"))">
                    <i class="bi bi-gear"></i> Manage Event
                </button>
            }
        </div>

        <div class="row">
            <div class="col-md-8">
                <h3>Participants</h3>
                <div class="list-group mb-4">
                    @foreach (var participant in _event.EventUsers)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@(participant.User?.UserName ?? participant.Email)</strong>
                                @if (!participant.IsAccepted)
                                {
                                    <span class="badge bg-warning text-dark ms-2">Pending</span>
                                }
                                <br />
                                <small class="text-muted">@participant.Role</small>
                            </div>
                            <div>
                                @if (participant.UserId != null)
                                {
                                    <button class="btn btn-link" @onclick="() => ViewWishlist(participant.UserId)">View Wishlist</button>
                                }
                                @if (_isOwner && participant.User?.Id != _currentUserId)
                                {
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => HandleRemoveParticipant(participant)">
                                        Remove
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>

                @if (_isOwner)
                {
                    <h4>Add Participant</h4>
                    <div class="input-group mb-3">
                        <input type="email" @bind="_newParticipantEmail" class="form-control" placeholder="Enter user's email">
                        <button class="btn btn-success" @onclick="HandleAddParticipant">Add</button>
                    </div>
                    @if (_addParticipantError != null)
                    {
                        <div class="alert alert-danger">@_addParticipantError</div>
                    }
                }
            </div>
            <div class="col-md-4">
                <h3>Event Details</h3>
                <p>@_event.Description</p>
                <p><strong>Date:</strong> @_event.Date.ToString("MMMM dd, yyyy")</p>
                @if (_event.Budget.HasValue)
                {
                    <p><strong>Budget:</strong> @_event.Budget.Value.ToString("C")</p>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int EventId { get; set; }
    private EventModel? _event;
    private string? _currentUserId;
    private bool _isOwner;
    private string _newParticipantEmail = string.Empty;
    private string? _addParticipantError;

    protected override async Task OnInitializedAsync()
    {
        _currentUserId = await UserContextService.GetUserIdAsync();
        await LoadEvent();
    }

    private async Task LoadEvent()
    {
        _event = await EventService.GetEventAsync(EventId);
        _isOwner = _event?.CreatedBy.Id == _currentUserId;
    }

    private async Task HandleAddParticipant()
    {
        if (string.IsNullOrWhiteSpace(_newParticipantEmail))
        {
            _addParticipantError = "Please enter a valid email address.";
            return;
        }

        var result = await EventService.AddUserToEventByEmailAsync(EventId, _newParticipantEmail);
        if (result)
        {
            _addParticipantError = null;
            _newParticipantEmail = string.Empty;
            await LoadEvent(); // Refresh participants list
        }
        else
        {
            _addParticipantError = "Unable to add participant. Please ensure the email is correct and the user exists.";
        }
    }

    private async Task HandleRemoveParticipant(EventUserModel participant)
    {
        await EventService.RemoveUserFromEventAsync(EventId, participant.User.Id);
        await LoadEvent();
    }

    private void ViewWishlist(string userId)
    {
        NavigationManager.NavigateTo($"/users/{userId}/wishlists");
    }
}
